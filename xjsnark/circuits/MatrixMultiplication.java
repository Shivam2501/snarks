package xjsnark.matrixMultiplication;

/*Generated by MPS */

import backend.structure.CircuitGenerator;
import backend.auxTypes.UnsignedInteger;
import java.math.BigInteger;
import backend.eval.CircuitEvaluator;

public class MatrixMultiplication extends CircuitGenerator {



  public static void main(String[] args) {
    // This is the java main method. Its purpose is to make the Progam runnable in the environment 
    // This method can be left empty, or used to set Configuration params (see examples) 
    new MatrixMultiplication();
  }

  public MatrixMultiplication() {
    super("MatrixMultiplication");
    __generateCircuit();

  }



  public void __init() {
    m1 = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{SIZE * SIZE}, 32);
    m2 = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{SIZE * SIZE}, 32);
    out = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{SIZE * SIZE}, 32);
  }

  public UnsignedInteger[] m1;
  public UnsignedInteger[] m2;
  public UnsignedInteger[] out;

  public static int SIZE = 64;
  @Override
  public void __defineInputs() {
    super.__defineInputs();







  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();

    m1 = UnsignedInteger.createVerifiedWitnessArray(this, m1.length, 32);
    m2 = UnsignedInteger.createVerifiedWitnessArray(this, m2.length, 32);









  }
  @Override
  public void __defineWitnesses() {
    super.__defineWitnesses();









  }
  @Override
  public void __defineOutputs() {
    super.__defineOutputs();
    UnsignedInteger.makeOutput(this, out);







  }
  public void outsource() {
    for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j < SIZE; j++) {
        UnsignedInteger sum = new UnsignedInteger(32, new BigInteger("0"));
        for (int k = 0; k < SIZE; k++) {
          sum.assign(sum.add(m1[i * SIZE + k].mul(m2[k * SIZE + j])), 32);
        }
        out[i * SIZE + j].assign(sum, 32);
      }
    }
  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
