package xjsnark.merkleTreeConstruction;

/*Generated by MPS */

import backend.auxTypes.StructDefinition;
import java.util.ArrayList;
import backend.auxTypes.VariableState;
import backend.auxTypes.IAuxType;

public class Input extends StructDefinition {


  /*package*/ Leaf[] nodes = new Leaf[ConstructMerkleTree.NUM_LEAF];
  public Input() {
    for (int i = 0; i < nodes.length; i++) {
      nodes[i] = new Leaf();
    }
  }


  public void __makeInput() {






    if (nodes != null) {
      for (int i = 0; i < nodes.length; i++) {
        if (nodes[i] != null) {
          nodes[i].__makeInput();
        }
      }

    }





  }


  public void __makeOutput() {





    if (nodes != null) {
      for (int i = 0; i < nodes.length; i++) {
        if (nodes[i] != null) {
          nodes[i].__makeOutput();
        }
      }

    }
  }


  public void __makeWitness() {







    if (nodes != null) {
      for (int i = 0; i < nodes.length; i++) {
        if (nodes[i] != null) {
          nodes[i].__makeWitness();
        }
      }

    }





  }


  public void __makeVerifiedWitness() {






    if (nodes != null) {
      for (int i = 0; i < nodes.length; i++) {
        if (nodes[i] != null) {
          nodes[i].__makeVerifiedWitness();
        }
      }

    }






  }

  public void __alignAndPackAll() {

    ArrayList<VariableState> states = new ArrayList();





    if (nodes != null) {
      for (int i = 0; i < nodes.length; i++) {
        if (nodes[i] != null) {
          nodes[i].__alignAndPackAll();
        }
      }

    }


    for (VariableState state : states) {
      state.setPackedAhead(true);
      state.setMustBeWithinRange(true);
      state.setConditionallySplittedAndAlignedAhead(true);
    }

  }
  public static Class<?> __getClassRef() {
    return Input.class;
  }

  public StructDefinition __copy() {
    return null;
  }
  public int[] __getBasicElementsDetails() {
    return null;
  }
  public ArrayList<IAuxType> __getBasicElements() {
    ArrayList<IAuxType> list = new ArrayList();





    if (nodes != null) {
      for (int i = 0; i < nodes.length; i++) {
        if (nodes[i] != null) {
          list.addAll(nodes[i].__getBasicElements());
        }
      }

    }


    return list;
  }
}
